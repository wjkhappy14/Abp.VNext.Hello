
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    abp-app: abp-dashboard
  name: abp-dashboard
  namespace: {{ .Values.namespace }}

---

kind: Service
apiVersion: v1
metadata:
  labels:
    abp-app: abp-dashboard
  name: abp-dashboard
  namespace: {{ .Values.namespace }}
spec:
  ports:
    - port: 443
      targetPort: 8443
  selector:
    abp-app: abp-dashboard

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    abp-app: abp-dashboard
  name: abp-dashboard-certs
  namespace: {{ .Values.namespace }}
type: Opaque

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    abp-app: abp-dashboard
  name: abp-dashboard-csrf
  namespace: {{ .Values.namespace }}
type: Opaque
data:
  csrf: ""

---

apiVersion: v1
kind: Secret
metadata:
  labels:
    abp-app: abp-dashboard
  name: abp-dashboard-key-holder
  namespace: {{ .Values.namespace }}
type: Opaque

---

kind: ConfigMap
apiVersion: v1
metadata:
  labels:
    abp-app: abp-dashboard
  name: abp-dashboard-settings
  namespace: {{ .Values.namespace }}

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    abp-app: abp-dashboard
  name: abp-dashboard
  namespace: {{ .Values.namespace }}
rules:
  # Allow Dashboard to get, update and delete Dashboard exclusive secrets.
  - apiGroups: [""]
    resources: ["secrets"]
    resourceNames: ["abp-dashboard-key-holder", "abp-dashboard-certs", "abp-dashboard-csrf"]
    verbs: ["get", "update", "delete"]
    # Allow Dashboard to get and update 'abp-dashboard-settings' config map.
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["abp-dashboard-settings"]
    verbs: ["get", "update"]
    # Allow Dashboard to get metrics.
  - apiGroups: [""]
    resources: ["services"]
    resourceNames: ["heapster", "dashboard-metrics-scraper"]
    verbs: ["proxy"]
  - apiGroups: [""]
    resources: ["services/proxy"]
    resourceNames: ["heapster", "http:heapster:", "https:heapster:", "dashboard-metrics-scraper", "http:dashboard-metrics-scraper"]
    verbs: ["get"]

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  labels:
    abp-app: abp-dashboard
  name: abp-dashboard
rules:
  # Allow Metrics Scraper to get metrics from the Metrics server
  - apiGroups: ["metrics.k8s.io"]
    resources: ["pods", "nodes"]
    verbs: ["get", "list", "watch"]

---

apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    abp-app: abp-dashboard
  name: abp-dashboard
  namespace: {{ .Values.namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: abp-dashboard
subjects:
  - kind: ServiceAccount
    name: abp-dashboard
    namespace: {{ .Values.namespace }}

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: abp-dashboard
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: abp-dashboard
subjects:
  - kind: ServiceAccount
    name: abp-dashboard
    namespace: {{ .Values.namespace }}

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    abp-app: abp-dashboard
  name: abp-dashboard
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      abp-app: abp-dashboard
  template:
    metadata:
      labels:
        abp-app: abp-dashboard
    spec:
      containers:
        - name: abp-dashboard
          image: kubernetesui/dashboard:v2.4.0
          imagePullPolicy: Always
          ports:
            - containerPort: 8443
              protocol: TCP
          args:
            - --auto-generate-certificates
            - --namespace=abp-dashboard
            # Uncomment the following line to manually specify Kubernetes API server Host
            # If not specified, Dashboard will attempt to auto discover the API server and connect
            # to it. Uncomment only if the default does not work.
            # - --apiserver-host=http://my-address:port
          volumeMounts:
            - name: abp-dashboard-certs
              mountPath: /certs
              # Create on-disk volume to store exec logs
            - mountPath: /tmp
              name: tmp-volume
          livenessProbe:
            httpGet:
              scheme: HTTPS
              path: /
              port: 8443
            initialDelaySeconds: 30
            timeoutSeconds: 30
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      volumes:
        - name: abp-dashboard-certs
          secret:
            secretName: abp-dashboard-certs
        - name: tmp-volume
          emptyDir: {}
      serviceAccountName: abp-dashboard
      nodeSelector:
        "kubernetes.io/os": linux
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule

---

kind: Service
apiVersion: v1
metadata:
  labels:
    abp-app: dashboard-metrics-scraper
  name: dashboard-metrics-scraper
  namespace: {{ .Values.namespace }}
spec:
  ports:
    - port: 8000
      targetPort: 8000
  selector:
    abp-app: dashboard-metrics-scraper

---

kind: Deployment
apiVersion: apps/v1
metadata:
  labels:
    abp-app: dashboard-metrics-scraper
  name: dashboard-metrics-scraper
  namespace: {{ .Values.namespace }}
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      abp-app: dashboard-metrics-scraper
  template:
    metadata:
      labels:
        abp-app: dashboard-metrics-scraper
    spec:
      securityContext:
        seccompProfile:
          type: RuntimeDefault
      containers:
        - name: dashboard-metrics-scraper
          image: kubernetesui/metrics-scraper:v1.0.7
          ports:
            - containerPort: 8000
              protocol: TCP
          livenessProbe:
            httpGet:
              scheme: HTTP
              path: /
              port: 8000
            initialDelaySeconds: 30
            timeoutSeconds: 30
          volumeMounts:
          - mountPath: /tmp
            name: tmp-volume
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            runAsUser: 1001
            runAsGroup: 2001
      serviceAccountName: abp-dashboard
      nodeSelector:
        "kubernetes.io/os": linux
      tolerations:
        - key: node-role.kubernetes.io/master
          effect: NoSchedule
      volumes:
        - name: tmp-volume
          emptyDir: {}
